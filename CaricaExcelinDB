package main

import (
    "database/sql"
    "fmt"
    "log"

    "github.com/xuri/excelize/v2"
    _ "github.com/go-sql-driver/mysql"
)

func main() {
    // Percorso del file Excel da leggere
    genFilePath := "example.xlsx" // Sostituisci con il percorso del tuo file

    // Apri il file Excel
    genFile, err := excelize.OpenFile(genFilePath)
    if err != nil {
        log.Fatalf("Impossibile aprire il file: %v\n", err)
    }
    defer func() {
        if err := genFile.Close(); err != nil {
            log.Fatalf("Errore nella chiusura del file: %v\n", err)
        }
    }()

    // Nome del foglio di lavoro da elaborare
    genSheetName := "Sheet1" // Sostituisci con il nome del foglio da elaborare

    // Ottieni tutte le righe del foglio di lavoro
    genRows, err := genFile.GetRows(genSheetName)
    if err != nil {
        log.Fatalf("Errore nel recupero delle righe: %v\n", err)
    }

    // Configurazione del database MySQL
    genDb, err := sql.Open("mysql", "user:password@tcp(127.0.0.1:3306)/dbname")
    if err != nil {
        log.Fatalf("Errore nella connessione al database: %v\n", err)
    }
    defer func() {
        if err := genDb.Close(); err != nil {
            log.Fatalf("Errore nella chiusura del database: %v\n", err)
        }
    }()

    // Prepara la query di inserimento
    genInsertQuery := `INSERT INTO your_table_name (column1, column2, column3) VALUES (?, ?, ?)`
    genStmt, err := genDb.Prepare(genInsertQuery)
    if err != nil {
        log.Fatalf("Errore nella preparazione della query: %v\n", err)
    }
    defer func() {
        if err := genStmt.Close(); err != nil {
            log.Fatalf("Errore nella chiusura della query: %v\n", err)
        }
    }()

    // Elabora le righe del foglio di lavoro e inserisci nel database
    for genRowIndex, genRow := range genRows {
        if genRowIndex == 0 {
            // Salta la riga di intestazione
            continue
        }

        // Supponendo che il foglio Excel abbia tre colonne corrispondenti a column1, column2, column3
        if len(genRow) < 3 {
            log.Printf("Riga %d ha meno di 3 colonne, viene ignorata\n", genRowIndex)
            continue
        }

        _, err := genStmt.Exec(genRow[0], genRow[1], genRow[2])
        if err != nil {
            log.Printf("Errore nell'inserimento della riga %d: %v\n", genRowIndex, err)
        } else {
            fmt.Printf("Riga %d inserita con successo\n", genRowIndex)
        }
    }
}
